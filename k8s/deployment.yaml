apiVersion: apps/v1
kind: Deployment
metadata:
  name: seraphc2-app
  namespace: seraphc2
  labels:
    app.kubernetes.io/name: seraphc2
    app.kubernetes.io/component: application
    app.kubernetes.io/part-of: seraphc2
    app.kubernetes.io/version: '1.0.0'
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: seraphc2
      app.kubernetes.io/component: application
  template:
    metadata:
      labels:
        app.kubernetes.io/name: seraphc2
        app.kubernetes.io/component: application
        app.kubernetes.io/part-of: seraphc2
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port: '9090'
        prometheus.io/path: '/metrics'
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
      containers:
        - name: seraphc2
          image: seraphc2:latest
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
            - name: https
              containerPort: 8443
              protocol: TCP
            - name: metrics
              containerPort: 9090
              protocol: TCP
          env:
            - name: CORS_ORIGIN
              value: 'https://yourdomain.com' # Change this to your domain
          envFrom:
            - configMapRef:
                name: seraphc2-config
            - secretRef:
                name: seraphc2-secrets
          resources:
            requests:
              memory: '1Gi'
              cpu: '500m'
            limits:
              memory: '2Gi'
              cpu: '1000m'
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL
          volumeMounts:
            - name: logs
              mountPath: /app/logs
            - name: uploads
              mountPath: /app/uploads
            - name: tmp
              mountPath: /tmp
      volumes:
        - name: logs
          emptyDir: {}
        - name: uploads
          persistentVolumeClaim:
            claimName: seraphc2-uploads-pvc
        - name: tmp
          emptyDir: {}
      restartPolicy: Always
      terminationGracePeriodSeconds: 30

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: seraphc2
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: database
    app.kubernetes.io/part-of: seraphc2
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: postgres
      app.kubernetes.io/component: database
  template:
    metadata:
      labels:
        app.kubernetes.io/name: postgres
        app.kubernetes.io/component: database
        app.kubernetes.io/part-of: seraphc2
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      containers:
        - name: postgres
          image: postgres:15-alpine
          ports:
            - name: postgres
              containerPort: 5432
              protocol: TCP
          envFrom:
            - configMapRef:
                name: postgres-config
            - secretRef:
                name: postgres-secrets
          resources:
            requests:
              memory: '512Mi'
              cpu: '250m'
            limits:
              memory: '1Gi'
              cpu: '500m'
          livenessProbe:
            exec:
              command:
                - pg_isready
                - -U
                - seraphc2
                - -d
                - seraphc2
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 3
          readinessProbe:
            exec:
              command:
                - pg_isready
                - -U
                - seraphc2
                - -d
                - seraphc2
            initialDelaySeconds: 15
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL
          volumeMounts:
            - name: postgres-data
              mountPath: /var/lib/postgresql/data
            - name: postgres-run
              mountPath: /var/run/postgresql
            - name: tmp
              mountPath: /tmp
      volumes:
        - name: postgres-data
          persistentVolumeClaim:
            claimName: postgres-data-pvc
        - name: postgres-run
          emptyDir: {}
        - name: tmp
          emptyDir: {}
      restartPolicy: Always

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: seraphc2
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: cache
    app.kubernetes.io/part-of: seraphc2
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: redis
      app.kubernetes.io/component: cache
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis
        app.kubernetes.io/component: cache
        app.kubernetes.io/part-of: seraphc2
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      containers:
        - name: redis
          image: redis:7-alpine
          command:
            - redis-server
            - /usr/local/etc/redis/redis.conf
            - --requirepass
            - $(REDIS_PASSWORD)
          ports:
            - name: redis
              containerPort: 6379
              protocol: TCP
          env:
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: seraphc2-secrets
                  key: REDIS_PASSWORD
          resources:
            requests:
              memory: '256Mi'
              cpu: '100m'
            limits:
              memory: '512Mi'
              cpu: '250m'
          livenessProbe:
            exec:
              command:
                - redis-cli
                - --no-auth-warning
                - -a
                - $(REDIS_PASSWORD)
                - ping
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 10
            failureThreshold: 3
          readinessProbe:
            exec:
              command:
                - redis-cli
                - --no-auth-warning
                - -a
                - $(REDIS_PASSWORD)
                - ping
            initialDelaySeconds: 15
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 3
          securityContext:
            allowPrivilegeEscalation: false
            readOnlyRootFilesystem: true
            capabilities:
              drop:
                - ALL
          volumeMounts:
            - name: redis-data
              mountPath: /data
            - name: redis-config
              mountPath: /usr/local/etc/redis/redis.conf
              subPath: redis.conf
            - name: tmp
              mountPath: /tmp
      volumes:
        - name: redis-data
          persistentVolumeClaim:
            claimName: redis-data-pvc
        - name: redis-config
          configMap:
            name: redis-config
        - name: tmp
          emptyDir: {}
      restartPolicy: Always

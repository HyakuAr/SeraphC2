# SeraphC2 Production Configuration Template
# Copy this file to .env for production deployment
# 
# SECURITY WARNING: This file contains production configuration examples.
# All secrets and passwords MUST be changed before deployment!

# =============================================================================
# ENVIRONMENT CONFIGURATION
# =============================================================================

# Production environment
NODE_ENV=production

# Server binding - bind to all interfaces in production
PORT=3000
HOST=0.0.0.0

# HTTP/HTTPS Configuration - standard production ports
HTTP_PORT=80
HTTPS_PORT=443
CORS_ORIGINS=https://yourdomain.com,https://api.yourdomain.com
ENABLE_REQUEST_LOGGING=false

# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================

# PostgreSQL production settings
DB_HOST=your-postgres-host.com
DB_PORT=5432
DB_NAME=seraphc2_prod
DB_USER=seraphc2_prod
DB_PASSWORD=CHANGE_THIS_STRONG_DATABASE_PASSWORD_32_CHARS_MIN

# Production-optimized connection pool
DB_POOL_MIN=5
DB_POOL_MAX=50
DB_POOL_IDLE_TIMEOUT=60000
DB_POOL_CONNECTION_TIMEOUT=15000

# Database health monitoring
DB_ENABLE_HEALTH_CHECK=true
DB_HEALTH_CHECK_INTERVAL=30000

# =============================================================================
# REDIS CONFIGURATION
# =============================================================================

# Redis production settings
REDIS_HOST=your-redis-host.com
REDIS_PORT=6379
REDIS_PASSWORD=CHANGE_THIS_REDIS_PASSWORD
REDIS_DB=0
REDIS_KEY_PREFIX=seraphc2:prod:

# Redis connection behavior - production optimized
REDIS_MAX_RETRIES=5
REDIS_CONNECT_TIMEOUT=15000

# =============================================================================
# SESSION MANAGEMENT
# =============================================================================

# Production session configuration - more secure
SESSION_TTL_SECONDS=7200
SESSION_MAX_IDLE_SECONDS=3600
SESSION_ENABLE_SLIDING_EXPIRATION=true
SESSION_MAX_CONCURRENT=5
SESSION_ENABLE_DISTRIBUTED=true

# =============================================================================
# CLUSTER CONFIGURATION
# =============================================================================

# Node identification - use unique IDs for each node
NODE_ID=seraphc2-prod-node-1
NODE_ROLE=primary

# Production cluster configuration
CLUSTER_ENABLE=true
CLUSTER_HEARTBEAT_INTERVAL=10000
CLUSTER_HEARTBEAT_TIMEOUT=30000
CLUSTER_ENABLE_AUTO_SCALING=true
CLUSTER_MIN_NODES=2
CLUSTER_MAX_NODES=20

# =============================================================================
# LOAD BALANCER CONFIGURATION
# =============================================================================

# Production load balancing - optimized for performance
LB_ALGORITHM=least-connections
LB_HEALTH_CHECK_INTERVAL=15000
LB_HEALTH_CHECK_TIMEOUT=5000
LB_ENABLE_STICKY_SESSIONS=true
LB_ENABLE_CIRCUIT_BREAKER=true
LB_CIRCUIT_BREAKER_THRESHOLD=3
LB_MAX_RETRIES=2

# =============================================================================
# MONITORING AND ALERTING
# =============================================================================

# Production monitoring - comprehensive coverage
MONITORING_ENABLE=true
MONITORING_METRICS_INTERVAL=60000
MONITORING_RETENTION_DAYS=30

# Production alerting - more alerts allowed
MONITORING_ENABLE_ALERTING=true
MONITORING_ALERT_CHECK_INTERVAL=30000
MONITORING_MAX_ALERTS_PER_HOUR=20

# =============================================================================
# SECURITY CONFIGURATION
# =============================================================================

# CRITICAL: Generate strong, unique secrets for production!
# Use: openssl rand -base64 32
# Or: node -e "console.log(require('crypto').randomBytes(32).toString('base64'))"
JWT_SECRET=CHANGE_THIS_TO_SECURE_RANDOM_32_CHAR_SECRET
ENCRYPTION_KEY=CHANGE_THIS_TO_SECURE_RANDOM_32_CHAR_KEY

# =============================================================================
# LOGGING CONFIGURATION
# =============================================================================

# Production logging - less verbose for performance and security
LOG_LEVEL=warn
LOG_FILE=/var/log/seraphc2/seraphc2.log

# =============================================================================
# PROTOCOL CONFIGURATION
# =============================================================================

# Production protocol configuration
DNS_PORT=53
SMB_PIPE_NAME=seraphc2_prod

# =============================================================================
# SSL/TLS CONFIGURATION
# =============================================================================

# Production SSL certificates - use proper CA-signed certificates
SSL_CERT_PATH=/etc/ssl/certs/seraphc2.crt
SSL_KEY_PATH=/etc/ssl/private/seraphc2.key

# =============================================================================
# PRODUCTION SECURITY CHECKLIST
# =============================================================================

# Before deploying to production, ensure:
# 
# 1. All passwords and secrets have been changed from defaults
# 2. JWT_SECRET is at least 32 characters and cryptographically secure
# 3. ENCRYPTION_KEY is at least 32 characters and cryptographically secure
# 4. Database password is strong (12+ characters, mixed case, numbers, symbols)
# 5. Redis password is set and strong
# 6. SSL certificates are valid and from a trusted CA
# 7. Database connections use SSL/TLS encryption
# 8. Redis connections use TLS if available
# 9. Firewall rules are configured to restrict access
# 10. Log files are properly secured and rotated
# 11. Monitoring and alerting are configured
# 12. Backup procedures are in place
# 13. Secrets are managed through a secure secrets management system
# 14. Environment variables are not logged or exposed

# =============================================================================
# PRODUCTION PERFORMANCE NOTES
# =============================================================================

# For high-traffic production environments, consider:
# - Increasing DB_POOL_MAX to 100+ based on load
# - Using Redis Cluster for high availability
# - Enabling database read replicas
# - Using a CDN for static assets
# - Implementing proper caching strategies
# - Setting up database connection pooling
# - Using container orchestration (Kubernetes)
# - Implementing proper monitoring and alerting
# - Setting up log aggregation and analysis

# =============================================================================
# PRODUCTION DEPLOYMENT NOTES
# =============================================================================

# Recommended production deployment:
# 1. Use container orchestration (Docker + Kubernetes)
# 2. Deploy behind a reverse proxy (nginx, HAProxy)
# 3. Use managed database services (AWS RDS, Google Cloud SQL)
# 4. Use managed Redis services (AWS ElastiCache, Redis Cloud)
# 5. Implement proper backup and disaster recovery
# 6. Use infrastructure as code (Terraform, CloudFormation)
# 7. Implement CI/CD pipelines for automated deployment
# 8. Use secrets management (AWS Secrets Manager, HashiCorp Vault)
# 9. Implement proper monitoring (Prometheus, Grafana, DataDog)
# 10. Set up log aggregation (ELK Stack, Splunk, CloudWatch)
name: Security Scanning

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: |
          # Run npm audit and capture output
          npm audit --audit-level=moderate --json > audit-results.json || true

          # Check for high/critical vulnerabilities
          HIGH_VULNS=$(cat audit-results.json | jq '.metadata.vulnerabilities.high // 0')
          CRITICAL_VULNS=$(cat audit-results.json | jq '.metadata.vulnerabilities.critical // 0')

          echo "High vulnerabilities: $HIGH_VULNS"
          echo "Critical vulnerabilities: $CRITICAL_VULNS"

          # Display audit results
          npm audit --audit-level=moderate

          # Fail if critical vulnerabilities found
          if [ "$CRITICAL_VULNS" -gt 0 ]; then
            echo "❌ Critical vulnerabilities found. Please fix before proceeding."
            exit 1
          fi

          # Warn about high vulnerabilities but don't fail
          if [ "$HIGH_VULNS" -gt 0 ]; then
            echo "⚠️ High vulnerabilities found. Consider fixing these."
          fi

      - name: Scan frontend dependencies
        run: |
          cd web-client
          npm ci

          # Run npm audit for frontend
          npm audit --audit-level=moderate --json > ../frontend-audit-results.json || true

          # Check for high/critical vulnerabilities
          HIGH_VULNS=$(cat ../frontend-audit-results.json | jq '.metadata.vulnerabilities.high // 0')
          CRITICAL_VULNS=$(cat ../frontend-audit-results.json | jq '.metadata.vulnerabilities.critical // 0')

          echo "Frontend High vulnerabilities: $HIGH_VULNS"
          echo "Frontend Critical vulnerabilities: $CRITICAL_VULNS"

          # Display audit results
          npm audit --audit-level=moderate

          # Fail if critical vulnerabilities found
          if [ "$CRITICAL_VULNS" -gt 0 ]; then
            echo "❌ Critical vulnerabilities found in frontend. Please fix before proceeding."
            exit 1
          fi

  codeql-analysis:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: ['javascript']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: '/language:${{matrix.language}}'

  secret-scan:
    name: Secret Detection
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full history for secret scanning

      - name: Run TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  docker-security-scan:
    name: Docker Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'schedule'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          # Build a test Docker image for scanning
          cat > Dockerfile.security-test << 'EOF'
          FROM node:18-alpine
          WORKDIR /app
          COPY package*.json ./
          RUN npm ci --only=production
          COPY . .
          RUN npm run build
          EXPOSE 3000
          CMD ["npm", "start"]
          EOF

          docker build -f Dockerfile.security-test -t seraphc2:security-test .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'seraphc2:security-test'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  security-policy-check:
    name: Security Policy Validation
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for security policy files
        run: |
          echo "Checking for required security files..."

          # Check for SECURITY.md
          if [ -f "SECURITY.md" ]; then
            echo "✅ SECURITY.md found"
          else
            echo "❌ SECURITY.md not found"
            exit 1
          fi

          # Check for LICENSE
          if [ -f "LICENSE" ]; then
            echo "✅ LICENSE found"
          else
            echo "❌ LICENSE not found"
            exit 1
          fi

          # Check for DISCLAIMER.md
          if [ -f "DISCLAIMER.md" ]; then
            echo "✅ DISCLAIMER.md found"
          else
            echo "❌ DISCLAIMER.md not found"
            exit 1
          fi

          echo "All required security policy files are present"

  notify-security-issues:
    name: Security Issue Notification
    runs-on: ubuntu-latest
    needs: [dependency-scan, codeql-analysis, secret-scan, docker-security-scan]
    if: failure() && (github.event_name == 'push' || github.event_name == 'schedule')

    steps:
      - name: Create security issue notification
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const runUrl = `${context.serverUrl}/${owner}/${repo}/actions/runs/${context.runId}`;

            const issueBody = `
            ## 🚨 Security Scan Failure Alert

            A security scan has failed in the repository. Please review the following:

            **Workflow Run:** [${context.runId}](${runUrl})
            **Branch:** ${context.ref}
            **Commit:** ${context.sha}
            **Triggered by:** ${context.eventName}

            ### Action Required
            1. Review the failed security checks in the workflow run
            2. Address any critical or high-severity vulnerabilities
            3. Update dependencies if necessary
            4. Re-run the security scan to verify fixes

            ### Security Scan Types
            - Dependency vulnerability scanning
            - CodeQL security analysis  
            - Secret detection
            - Docker image security scanning

            This issue was automatically created by the security scanning workflow.
            `;

            // Only create issue if one doesn't already exist for security alerts
            const existingIssues = await github.rest.issues.listForRepo({
              owner,
              repo,
              labels: ['security', 'automated'],
              state: 'open'
            });

            if (existingIssues.data.length === 0) {
              await github.rest.issues.create({
                owner,
                repo,
                title: '🚨 Security Scan Failure - Action Required',
                body: issueBody,
                labels: ['security', 'automated', 'high-priority']
              });
            }

name: Continuous Integration

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  lint-and-format:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Check Prettier formatting
        run: npm run format:check

  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: seraphc2_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build TypeScript
        run: npm run build

      - name: Run unit tests
        run: npm run test:coverage
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/seraphc2_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test_jwt_secret_key_for_ci
          ENCRYPTION_KEY: test_encryption_key_32_chars_long

      - name: Run integration tests
        run: npm run test:integration
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/seraphc2_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test_jwt_secret_key_for_ci
          ENCRYPTION_KEY: test_encryption_key_32_chars_long
          RUN_INTEGRATION_TESTS: true

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false

  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install backend dependencies
        run: npm ci

      - name: Install frontend dependencies
        run: npm run install:web

      - name: Build frontend
        run: npm run build:web

      - name: Run frontend tests
        run: npm run test:web

  build-and-validate:
    name: Build Validation
    runs-on: ubuntu-latest
    needs: [lint-and-format, test-backend, test-frontend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build backend
        run: npm run build

      - name: Install frontend dependencies
        run: npm run install:web

      - name: Build frontend
        run: npm run build:web

      - name: Validate build artifacts
        run: |
          # Check that essential files exist
          test -f dist/index.js
          test -d web-client/build
          echo "Build validation successful"

  coverage-enforcement:
    name: Coverage Enforcement
    runs-on: ubuntu-latest
    needs: test-backend

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: seraphc2_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate coverage report
        run: npm run test:coverage
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/seraphc2_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test_jwt_secret_key_for_ci
          ENCRYPTION_KEY: test_encryption_key_32_chars_long

      - name: Check coverage threshold
        run: |
          # Extract coverage percentage from Jest output
          COVERAGE=$(npm run test:coverage 2>&1 | grep -o "All files.*[0-9]\+\.[0-9]\+" | grep -o "[0-9]\+\.[0-9]\+" | head -1)
          echo "Current coverage: ${COVERAGE}%"

          # Check if coverage meets 80% threshold
          if (( $(echo "$COVERAGE >= 80" | bc -l) )); then
            echo "✅ Coverage threshold met: ${COVERAGE}% >= 80%"
          else
            echo "❌ Coverage threshold not met: ${COVERAGE}% < 80%"
            exit 1
          fi
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/seraphc2_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test_jwt_secret_key_for_ci
          ENCRYPTION_KEY: test_encryption_key_32_chars_long

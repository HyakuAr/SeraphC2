{
  "name": "seraphc2",
  "version": "1.0.0",
  "description": "SeraphC2 - Advanced Command and Control Framework",
  "main": "dist/index.js",
  "scripts": {
    "build": "tsc",
    "build:watch": "tsc --watch",
    "build:web": "cd web-client && npm run build",
    "build:prod": "npm run clean && npm run lint && npm run format:check && tsc --project tsconfig.prod.json && npm run build:web",
    "build:docker": "docker build -t seraphc2:latest -f docker/server/Dockerfile .",
    "build:docker:prod": "docker build -t seraphc2:latest -f docker/server/Dockerfile.prod .",
    "start": "node dist/index.js",
    "start:prod": "cross-env NODE_ENV=production node dist/index.js",
    "start:staging": "cross-env NODE_ENV=staging node dist/index.js",
    "dev": "ts-node src/index.ts",
    "dev:web": "cd web-client && npm start",
    "test": "jest",
    "test:watch": "jest --watch",
    "test:coverage": "jest --coverage",
    "test:integration": "RUN_INTEGRATION_TESTS=true jest --testPathPattern=integration",
    "test:e2e": "cross-env RUN_E2E_TESTS=true jest --testPathPattern=e2e --runInBand",
    "test:performance": "cross-env NODE_ENV=test jest --testPathPattern=performance --runInBand --detectOpenHandles",
    "test:security": "cross-env NODE_ENV=test jest --testPathPattern=security --runInBand --detectOpenHandles",
    "test:deployment": "cross-env NODE_ENV=test jest --testPathPattern=deployment --runInBand --detectOpenHandles",
    "test:web": "cd web-client && npm test -- --watchAll=false",
    "test:db": "ts-node scripts/test-database.ts",
    "test:all": "npm run test:coverage && npm run test:integration && npm run test:e2e && npm run test:performance && npm run test:security && npm run test:deployment",
    "test:ci": "npm run test:coverage -- --ci --watchAll=false --passWithNoTests",
    "performance:test": "ts-node scripts/performance-test.ts",
    "performance:load": "ts-node scripts/performance-test.ts load",
    "performance:stress": "ts-node scripts/performance-test.ts stress",
    "migrate": "ts-node scripts/migrate.ts",
    "migrate:up": "ts-node scripts/migrate.ts up",
    "migrate:down": "ts-node scripts/migrate.ts down",
    "migrate:status": "ts-node scripts/migrate.ts status",
    "migrate:create": "ts-node scripts/migrate.ts create",
    "migrate:validate": "ts-node scripts/migrate.ts validate",
    "migrate:reset": "ts-node scripts/migrate.ts reset",
    "migrate:prod": "cross-env NODE_ENV=production ts-node scripts/migrate.ts up",
    "changelog:generate": "ts-node scripts/generate-changelog.ts",
    "release:notes": "ts-node scripts/release-notes.ts",
    "release:prepare": "npm run changelog:generate && npm run release:notes",
    "release:build": "npm run build:prod && npm run test:all",
    "upgrade:check": "ts-node scripts/upgrade-check.ts",
    "logs:rotate": "ts-node scripts/log-rotation.ts rotate",
    "logs:status": "ts-node scripts/log-rotation.ts status",
    "logs:analyze": "ts-node -e \"import('./src/utils/logAnalysis').then(m => new m.LogAnalyzer().generateReport().then(console.log))\"",
    "deploy:validate": "ts-node scripts/validate-deployment.ts",
    "deploy:validate:prod": "ts-node scripts/validate-deployment.ts --env=production --type=docker",
    "deploy:validate:k8s": "ts-node scripts/validate-deployment.ts --env=production --type=kubernetes",
    "deploy:smoke": "ts-node scripts/smoke-test.ts",
    "deploy:smoke:prod": "ts-node scripts/smoke-test.ts --url=https://seraphc2.example.com --save-report",
    "deploy:docker": "docker-compose -f docker-compose.prod.yml up -d",
    "deploy:docker:dev": "docker-compose up -d",
    "deploy:k8s": "bash scripts/deploy-kubernetes.sh",
    "deploy:helm": "bash scripts/deploy-helm.sh",
    "deploy:prod": "bash scripts/deploy-production.sh",
    "security:scan": "npm audit && npm run test:security",
    "security:fix": "npm audit fix",
    "quality:check": "npm run lint && npm run format:check && npm run test:coverage",
    "quality:fix": "npm run lint:fix && npm run format",
    "health:check": "curl -f http://localhost:3000/api/health || exit 1",
    "health:detailed": "curl -f http://localhost:3000/api/health/detailed || exit 1",
    "backup:db": "ts-node -e \"import('./src/core/database').then(m => m.DatabaseConnection.getInstance().backup())\"",
    "backup:config": "tar -czf backups/config-$(date +%Y%m%d-%H%M%S).tar.gz .env* docker-compose*.yml k8s/ helm/",
    "restore:db": "ts-node -e \"import('./src/core/database').then(m => m.DatabaseConnection.getInstance().restore(process.argv[2]))\"",
    "monitor:logs": "tail -f logs/combined.log",
    "monitor:errors": "tail -f logs/error.log",
    "monitor:metrics": "curl -s http://localhost:3000/api/health/metrics | jq",
    "lint": "eslint src/**/*.ts",
    "lint:fix": "eslint src/**/*.ts --fix",
    "format": "prettier --write src/**/*.ts",
    "format:check": "prettier --check src/**/*.ts",
    "clean": "rimraf dist",
    "clean:all": "npm run clean && rimraf node_modules web-client/node_modules coverage web-client/coverage",
    "install:web": "cd web-client && npm install",
    "install:all": "npm install && npm run install:web",
    "postinstall": "npm run build",
    "prestart": "npm run migrate:up",
    "prestart:prod": "npm run migrate:prod"
  },
  "keywords": [
    "c2",
    "command-control",
    "security",
    "remote-access",
    "seraphc2"
  ],
  "author": "SeraphC2 Team",
  "license": "MIT",
  "devDependencies": {
    "@types/cors": "^2.8.19",
    "@types/express": "^5.0.3",
    "@types/express-validator": "^2.20.33",
    "@types/helmet": "^0.0.48",
    "@types/jest": "^29.5.5",
    "@types/json2csv": "^5.0.7",
    "@types/node": "^20.6.0",
    "@types/supertest": "^6.0.3",
    "@types/swagger-jsdoc": "^6.0.4",
    "@types/swagger-ui-express": "^4.1.8",
    "@typescript-eslint/eslint-plugin": "^6.7.0",
    "@typescript-eslint/parser": "^6.7.0",
    "cross-env": "^10.0.0",
    "eslint": "^8.49.0",
    "eslint-config-prettier": "^9.0.0",
    "eslint-plugin-prettier": "^5.0.0",
    "jest": "^29.7.0",
    "prettier": "^3.0.3",
    "rimraf": "^5.0.1",
    "supertest": "^7.1.4",
    "ts-jest": "^29.1.1",
    "ts-node": "^10.9.1",
    "typescript": "^5.2.2"
  },
  "dependencies": {
    "@types/bcrypt": "^6.0.0",
    "@types/ioredis": "^4.28.10",
    "@types/jsonwebtoken": "^9.0.10",
    "@types/multer": "^2.0.0",
    "@types/pg": "^8.15.5",
    "@types/qrcode": "^1.5.5",
    "@types/redis": "^4.0.10",
    "@types/socket.io": "^3.0.1",
    "@types/speakeasy": "^2.0.10",
    "@types/uuid": "^10.0.0",
    "axios": "^1.11.0",
    "bcrypt": "^6.0.0",
    "cors": "^2.8.5",
    "dotenv": "^16.3.1",
    "express": "^4.18.2",
    "express-validator": "^7.2.1",
    "helmet": "^8.1.0",
    "ioredis": "^5.7.0",
    "json2csv": "^5.0.7",
    "jsonwebtoken": "^9.0.2",
    "multer": "^2.0.2",
    "node-pg-migrate": "^8.0.3",
    "pg": "^8.16.3",
    "qrcode": "^1.5.4",
    "redis": "^5.8.2",
    "socket.io": "^4.8.1",
    "speakeasy": "^2.0.0",
    "swagger-jsdoc": "^6.2.8",
    "swagger-ui-express": "^5.0.1",
    "uuid": "^11.1.0",
    "winston": "^3.10.0",
    "winston-daily-rotate-file": "^4.7.1",
    "xmlbuilder2": "^3.1.1"
  }
}

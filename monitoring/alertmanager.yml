# Alertmanager Configuration for SeraphC2
global:
  smtp_smarthost: 'localhost:587'
  smtp_from: 'alerts@seraphc2.local'
  smtp_auth_username: ''
  smtp_auth_password: ''
  smtp_require_tls: false

# The directory from which notification templates are read.
templates:
  - '/etc/alertmanager/templates/*.tmpl'

# The root route on which each incoming alert enters.
route:
  # The labels by which incoming alerts are grouped together.
  group_by: ['alertname', 'cluster', 'service']

  # When a new group of alerts is created by an incoming alert, wait at
  # least 'group_wait' to send the initial notification.
  group_wait: 10s

  # When the first notification was sent, wait 'group_interval' to send a batch
  # of new alerts that started firing for that group.
  group_interval: 10s

  # If an alert has successfully been sent, wait 'repeat_interval' to
  # resend them.
  repeat_interval: 1h

  # A default receiver
  receiver: 'web.hook'

  # All the above attributes are inherited by all child routes and can
  # overwritten on each.
  routes:
    # Critical alerts route
    - match:
        severity: critical
      receiver: 'critical-alerts'
      group_wait: 5s
      group_interval: 5s
      repeat_interval: 30m

    # Security alerts route
    - match:
        category: security
      receiver: 'security-alerts'
      group_wait: 5s
      group_interval: 5s
      repeat_interval: 15m

    # Database alerts route
    - match:
        service: postgresql
      receiver: 'database-alerts'
      group_wait: 10s
      group_interval: 10s
      repeat_interval: 1h

    # Redis alerts route
    - match:
        service: redis
      receiver: 'database-alerts'
      group_wait: 10s
      group_interval: 10s
      repeat_interval: 1h

    # Application alerts route
    - match:
        service: seraphc2
      receiver: 'application-alerts'
      group_wait: 10s
      group_interval: 10s
      repeat_interval: 1h

# Inhibition rules allow to mute a set of alerts given that another alert is
# firing.
inhibit_rules:
  # Mute any warning-level notifications if the same alert is already critical.
  - source_match:
      severity: 'critical'
    target_match:
      severity: 'warning'
    # Apply inhibition if the alertname is the same.
    equal: ['alertname', 'cluster', 'service']

receivers:
  - name: 'web.hook'
    webhook_configs:
      - url: 'http://127.0.0.1:5001/'
        send_resolved: true
        http_config:
          basic_auth:
            username: 'webhook_user'
            password: 'webhook_password'

  - name: 'critical-alerts'
    email_configs:
      - to: '${ALERT_EMAIL_CRITICAL:-admin@seraphc2.local}'
        subject: '[CRITICAL] SeraphC2 Alert: {{ .GroupLabels.alertname }}'
        body: |
          {{ range .Alerts }}
          Alert: {{ .Annotations.summary }}
          Description: {{ .Annotations.description }}
          Labels: {{ range .Labels.SortedPairs }}{{ .Name }}={{ .Value }} {{ end }}
          {{ end }}
        headers:
          Priority: 'high'
    webhook_configs:
      - url: '${WEBHOOK_URL_CRITICAL:-http://127.0.0.1:5001/critical}'
        send_resolved: true
    slack_configs:
      - api_url: '${SLACK_WEBHOOK_URL}'
        channel: '#alerts-critical'
        title: 'Critical Alert: {{ .GroupLabels.alertname }}'
        text: '{{ range .Alerts }}{{ .Annotations.description }}{{ end }}'
        color: 'danger'

  - name: 'security-alerts'
    email_configs:
      - to: '${ALERT_EMAIL_SECURITY:-security@seraphc2.local}'
        subject: '[SECURITY] SeraphC2 Security Alert: {{ .GroupLabels.alertname }}'
        body: |
          SECURITY ALERT DETECTED

          {{ range .Alerts }}
          Alert: {{ .Annotations.summary }}
          Description: {{ .Annotations.description }}
          Time: {{ .StartsAt }}
          Labels: {{ range .Labels.SortedPairs }}{{ .Name }}={{ .Value }} {{ end }}
          {{ end }}

          Please investigate immediately.
        headers:
          Priority: 'high'
          X-Priority: '1'
    webhook_configs:
      - url: '${WEBHOOK_URL_SECURITY:-http://127.0.0.1:5001/security}'
        send_resolved: true
    slack_configs:
      - api_url: '${SLACK_WEBHOOK_URL}'
        channel: '#security-alerts'
        title: 'Security Alert: {{ .GroupLabels.alertname }}'
        text: '{{ range .Alerts }}{{ .Annotations.description }}{{ end }}'
        color: 'danger'

  - name: 'database-alerts'
    email_configs:
      - to: '${ALERT_EMAIL_DATABASE:-dba@seraphc2.local}'
        subject: '[DATABASE] SeraphC2 Database Alert: {{ .GroupLabels.alertname }}'
        body: |
          Database Alert:

          {{ range .Alerts }}
          Service: {{ .Labels.service }}
          Alert: {{ .Annotations.summary }}
          Description: {{ .Annotations.description }}
          Instance: {{ .Labels.instance }}
          {{ end }}
    webhook_configs:
      - url: '${WEBHOOK_URL_DATABASE:-http://127.0.0.1:5001/database}'
        send_resolved: true

  - name: 'application-alerts'
    email_configs:
      - to: '${ALERT_EMAIL_APPLICATION:-ops@seraphc2.local}'
        subject: '[APPLICATION] SeraphC2 Application Alert: {{ .GroupLabels.alertname }}'
        body: |
          Application Alert:

          {{ range .Alerts }}
          Alert: {{ .Annotations.summary }}
          Description: {{ .Annotations.description }}
          Instance: {{ .Labels.instance }}
          Severity: {{ .Labels.severity }}
          {{ end }}
    webhook_configs:
      - url: '${WEBHOOK_URL_APPLICATION:-http://127.0.0.1:5001/application}'
        send_resolved: true

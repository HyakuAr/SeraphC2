version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: seraphc2-postgres
    environment:
      POSTGRES_DB: seraphc2
      POSTGRES_USER: seraphc2
      POSTGRES_PASSWORD: seraphc2_dev_password
      POSTGRES_INITDB_ARGS: '--encoding=UTF-8'
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/database/init:/docker-entrypoint-initdb.d
    networks:
      - seraphc2-network
    restart: unless-stopped
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U seraphc2 -d seraphc2']
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: seraphc2-redis
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - seraphc2-network
    restart: unless-stopped
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5

  # SeraphC2 Server (Development)
  seraphc2-server:
    build:
      context: .
      dockerfile: docker/server/Dockerfile.dev
    container_name: seraphc2-server
    environment:
      NODE_ENV: development
      PORT: 3000
      HOST: 0.0.0.0
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: seraphc2
      DB_USER: seraphc2
      DB_PASSWORD: seraphc2_dev_password
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: dev_jwt_secret_key_change_in_production
      ENCRYPTION_KEY: dev_encryption_key_change_in_production
      LOG_LEVEL: debug
    ports:
      - '3000:3000'
      - '8080:8080'
      - '8443:8443'
    volumes:
      - .:/app
      - /app/node_modules
      - ./logs:/app/logs
    networks:
      - seraphc2-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    command: npm run dev

  # Nginx Reverse Proxy (Optional for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: seraphc2-nginx
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
    networks:
      - seraphc2-network
    depends_on:
      - seraphc2-server
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  seraphc2-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

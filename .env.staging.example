# SeraphC2 Staging Configuration Template
# Copy this file to .env for staging deployment
# 
# Staging environment mirrors production but with relaxed settings for testing

# =============================================================================
# ENVIRONMENT CONFIGURATION
# =============================================================================

# Staging environment
NODE_ENV=staging

# Server binding - similar to production
PORT=3000
HOST=0.0.0.0

# HTTP/HTTPS Configuration - staging ports
HTTP_PORT=8080
HTTPS_PORT=8443
CORS_ORIGINS=https://staging.yourdomain.com,https://staging-api.yourdomain.com
ENABLE_REQUEST_LOGGING=true

# =============================================================================
# DATABASE CONFIGURATION
# =============================================================================

# PostgreSQL staging settings
DB_HOST=your-staging-postgres-host.com
DB_PORT=5432
DB_NAME=seraphc2_staging
DB_USER=seraphc2_staging
DB_PASSWORD=CHANGE_THIS_STAGING_DATABASE_PASSWORD

# Staging connection pool - smaller than production
DB_POOL_MIN=2
DB_POOL_MAX=20
DB_POOL_IDLE_TIMEOUT=60000
DB_POOL_CONNECTION_TIMEOUT=15000

# Database health monitoring
DB_ENABLE_HEALTH_CHECK=true
DB_HEALTH_CHECK_INTERVAL=30000

# =============================================================================
# REDIS CONFIGURATION
# =============================================================================

# Redis staging settings
REDIS_HOST=your-staging-redis-host.com
REDIS_PORT=6379
REDIS_PASSWORD=CHANGE_THIS_STAGING_REDIS_PASSWORD
REDIS_DB=1
REDIS_KEY_PREFIX=seraphc2:staging:

# Redis connection behavior
REDIS_MAX_RETRIES=5
REDIS_CONNECT_TIMEOUT=15000

# =============================================================================
# SESSION MANAGEMENT
# =============================================================================

# Staging session configuration - more relaxed than production
SESSION_TTL_SECONDS=7200
SESSION_MAX_IDLE_SECONDS=3600
SESSION_ENABLE_SLIDING_EXPIRATION=true
SESSION_MAX_CONCURRENT=10
SESSION_ENABLE_DISTRIBUTED=true

# =============================================================================
# CLUSTER CONFIGURATION
# =============================================================================

# Node identification
NODE_ID=seraphc2-staging-node-1
NODE_ROLE=primary

# Staging cluster configuration - smaller scale
CLUSTER_ENABLE=true
CLUSTER_HEARTBEAT_INTERVAL=10000
CLUSTER_HEARTBEAT_TIMEOUT=30000
CLUSTER_ENABLE_AUTO_SCALING=false
CLUSTER_MIN_NODES=1
CLUSTER_MAX_NODES=5

# =============================================================================
# LOAD BALANCER CONFIGURATION
# =============================================================================

# Staging load balancing
LB_ALGORITHM=least-connections
LB_HEALTH_CHECK_INTERVAL=15000
LB_HEALTH_CHECK_TIMEOUT=5000
LB_ENABLE_STICKY_SESSIONS=true
LB_ENABLE_CIRCUIT_BREAKER=true
LB_CIRCUIT_BREAKER_THRESHOLD=3
LB_MAX_RETRIES=2

# =============================================================================
# MONITORING AND ALERTING
# =============================================================================

# Staging monitoring - similar to production but shorter retention
MONITORING_ENABLE=true
MONITORING_METRICS_INTERVAL=60000
MONITORING_RETENTION_DAYS=7

# Staging alerting
MONITORING_ENABLE_ALERTING=true
MONITORING_ALERT_CHECK_INTERVAL=30000
MONITORING_MAX_ALERTS_PER_HOUR=20

# =============================================================================
# SECURITY CONFIGURATION
# =============================================================================

# Staging secrets - should be different from production but can be less complex
# Still use secure generation: openssl rand -base64 32
JWT_SECRET=CHANGE_THIS_TO_STAGING_JWT_SECRET_32_CHARS
ENCRYPTION_KEY=CHANGE_THIS_TO_STAGING_ENCRYPTION_KEY_32_CHARS

# =============================================================================
# LOGGING CONFIGURATION
# =============================================================================

# Staging logging - more verbose than production for debugging
LOG_LEVEL=info
LOG_FILE=/var/log/seraphc2/seraphc2-staging.log

# =============================================================================
# PROTOCOL CONFIGURATION
# =============================================================================

# Staging protocol configuration
DNS_PORT=53
SMB_PIPE_NAME=seraphc2_staging

# =============================================================================
# SSL/TLS CONFIGURATION
# =============================================================================

# Staging SSL certificates - can use self-signed or staging CA
SSL_CERT_PATH=/etc/ssl/certs/seraphc2-staging.crt
SSL_KEY_PATH=/etc/ssl/private/seraphc2-staging.key

# =============================================================================
# STAGING ENVIRONMENT NOTES
# =============================================================================

# Staging environment purpose:
# - Test production configurations before deployment
# - Validate new features in production-like environment
# - Performance testing and load testing
# - Integration testing with external services
# - User acceptance testing
# - Security testing and penetration testing

# Key differences from production:
# - More verbose logging for debugging
# - Smaller resource allocation
# - Auto-scaling disabled to control costs
# - Shorter data retention periods
# - More relaxed session limits for testing
# - Self-signed certificates acceptable

# =============================================================================
# STAGING SECURITY CONSIDERATIONS
# =============================================================================

# Staging security checklist:
# 1. Use separate credentials from production
# 2. Use separate database and Redis instances
# 3. Implement network isolation from production
# 4. Use staging-specific secrets and keys
# 5. Limit access to staging environment
# 6. Regularly refresh staging data from production (sanitized)
# 7. Monitor staging environment for security issues
# 8. Use staging for security testing and validation

# =============================================================================
# STAGING TESTING SCENARIOS
# =============================================================================

# Common staging test scenarios:
# - Deployment and upgrade procedures
# - Database migration testing
# - Performance and load testing
# - Failover and disaster recovery testing
# - Integration with external services
# - User interface and user experience testing
# - API compatibility testing
# - Security vulnerability testing

# =============================================================================
# STAGING DATA MANAGEMENT
# =============================================================================

# Staging data considerations:
# - Use sanitized production data or synthetic test data
# - Implement data refresh procedures
# - Ensure no production secrets in staging data
# - Use separate external service accounts for staging
# - Implement data cleanup procedures
# - Consider data privacy regulations (GDPR, CCPA)

# =============================================================================
# STAGING MONITORING AND ALERTING
# =============================================================================

# Staging monitoring setup:
# - Monitor application performance and errors
# - Track resource usage and scaling behavior
# - Monitor database and Redis performance
# - Set up alerts for critical failures
# - Implement log aggregation and analysis
# - Monitor security events and anomalies
# - Track deployment and rollback procedures